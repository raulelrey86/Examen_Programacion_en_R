---
title: "Examen"
format: pdf
editor: visual
---

# Examen

Institución: Universidad de las Américas.

Programa: Magister en Data Science.

Asignatura: Programación en R.

Alumno: Raúl Urzúa Cortes.

## 1. Documentacion Dataset

Este data set contiene todos los estudiantes de Chile que se titularon el año 2023. El cúal contiene 297174 filas y 41 columnas.

Esta informacion fue adquirida desde el sitio web oficial del ministerio de educacion.

Link: <https://datosabiertos.mineduc.cl/titulados-en-educacion-superior/>

Se realizó una limpieza de los datos, se eliminaron las columnas que no se utilizaran y se borraron las filas con datos desconocidos (apuntes.txt). Obteniendo un dataset de 284408 filas y 8 columnas (series.csv).

Lo que busca la funcion es mostrar un gráfico dinamico que muestre la relación entre la cantidad de años teórico de estudios versus los años que se tarda dicho estudiante en termina sus estudios, con la opción de modificar el tamaño de la muestra y cantidad de años que el estudiante estuvo en la carrera.

Teniendo en cuenta las variables: gen_alu, rango_edad, nivel_carrera_1 y region_sede.

![](Presentación1.jpg){width="499"}

## 1.1. Variables

| Variable          | Descripción                             |
|-------------------|-----------------------------------------|
| gen_alu           | Genero del alumno                       |
| rango_edad        | Rango de edad del estudiante            |
| anio_ing_carr_ori | Año de ingreso a la carrera             |
| dur_estudio_car   | Duración teórica carrera (en semestres) |
| nivel_carrera_1   | Nivel de la carrera que estudia         |
| region_sede       | Region de la sede                       |

## 2. Documentación de la Función 

La función llamada \`Funcion_Grafico\`, lo que retorna la función en un Gráfico Dinamico de multiples variables y fue realizada en RStudio.

```{r}
#funcion Funcion_Grafico
#Parametros: muestra, cantidad_anios, filtro_variable
Funcion_Grafico <- function(
                            muestra=NULL, # desde 1 hasta 284408
                            cantidad_anios=NULL, # desde 1 a 15 años
                            filtro_variable=NULL # gen_alu, rango edad, nivel_carrera_1, region_sede
                            ){
# Se copia la serie original, con el limite de la muestra
series_2 <- series[1:muestra,] 
#---------------------------------------------------------------------
if(filtro_variable=="gen_alu"){

grafico_1 <- ggplot( series_2, aes( 
                                y = series_2$dur_estudio_carr,
                                x = series_2$tiempo_estudiando
                            )
                    )+
  geom_point(size=1, color="black")+ #Grafico de Caja
  geom_smooth(method = "lm", se = TRUE, color = "red") + #Regresion Lineal
  facet_grid(.~series_2$gen_alu)+ #Divide el gráfico segun la variable gen_alu
  labs(
    title = paste("Gráfico Genero del Alumno"),
    x = "Tiempo estudiando (años)",
    y = "Tiempo teorico de estudio (años)"
  ) +
  xlim(0,cantidad_anios) + # se estable el limite de tiempo de cant_anios
  return(grafico_1) #retorna el gráfico
  }
#-----------------------------------------------------------------------
if(filtro_variable=="rango_edad"){

  grafico_1 <- ggplot( series_2, aes( 
                                y = series_2$dur_estudio_carr,
                                x = series_2$tiempo_estudiando
                            )
                    )+
  geom_point(size=1, color="black")+ #Grafico de Caja
  geom_smooth(method = "lm", se = TRUE, color = "red") + #Regresion Lineal
  facet_grid(.~series_2$rango_edad)+#Divide el gráfico segun la variable rango_edad
  labs(
    title = paste("Gráfico Rango de Edad"),
    x = "Tiempo estudiando (años)",
    y = "Tiempo teorico de estudio (años)"
  ) +
  ylim(0,10)+
  xlim(0,cantidad_anios) 
  return(grafico_1)
  }
#------------------------------------------------------------------------
if(filtro_variable=="nivel_carrera_1"){

  grafico_1 <- ggplot( series_2, aes( 
                                y = series_2$dur_estudio_carr,
                                x = series_2$tiempo_estudiando
                            )
                    )+
  geom_point(size=1, color="black")+ #Grafico de Caja
  geom_smooth(method = "lm", se = TRUE, color = "red") + #Regresion Lineal
  facet_grid(.~series_2$nivel_carrera_1)+ #Divide el gráfico segun la variable nivel_carrera_1
  labs(
    title = paste("Gráfico Nivel de la carrera"),
    x = "Tiempo estudiando (años)",
    y = "Tiempo teorico de estudio (años)"
  ) +
  xlim(0,cantidad_anios)
  return(grafico_1)
  }
#-------------------------------------------------------------------------
if(filtro_variable=="region_sede"){

  grafico_1 <- ggplot( series_2, aes( 
                                y = series_2$dur_estudio_carr,
                                x = series_2$tiempo_estudiando
                            )
                    )+
  geom_point(size=1, color="black")+ #Grafico de Caja
  geom_smooth(method = "lm", se = TRUE, color = "red") + #Regresion Lineal
  facet_grid(.~series_2$region_sede)+ #Divide el gráfico segun la variable region_sede
  labs(
    title = paste("Gráfico Región Sede"),
    x = "Tiempo estudiando (años)",
    y = "Tiempo teorico de estudio (años)"
  ) +
  ylim(0,20)+
  xlim(0,cantidad_anios)
  return(grafico_1)
}
}
```

### 2.1. Escalabilidad de la función

Lo que se realiza a continuacion en una iteracion de la función, probando su escalabilidad y hasto donde puede llegar.

```{r}
# Funcion_grafico(muestra, cantidad_anios, filtro_variable)
# muestra = variable numerica, desde 1 hasta 284408
# cantidad_anios = variable numerica, desde 1 hasta 25
# filtro_variable = variable categorica: gen_alu, rango_edad, nivel_carrera_1, region_sede
series_2<-series
Funcion_Grafico(480000,10,"rango_edad")
```

A medida que se aumenta el tamaño de la muestra el modelo "ml" va cambiando su correlación.

Esto se debe porque este un conjunto de datos que no siguen el patron, para ello hay que realizar un muestreo mas detallado, para verificar si existes datos mal ingresados o son datos atipicos.

## 3. Documentacion Clase S3

### 3.1. Información del Dataset

A continuación se creo una funcion donde muestra el resumen del dataset.

```{r}
Funcion_Informacion <- function(){
  informacion <- cat("Informacion del Dataset\n\n")+
                 cat("Cantidad de Hombre y Mujeres\n")+
                 cat("Hombres :", sum(series$gen_alu==1), "\n")+
                 cat("Mujeres :", sum(series$gen_alu==2), "\n\n")+
                 cat("Rango de Edad \n")+
                 cat("15 y 19 años: ", sum(series$rango_edad=="15 a 19 Años"),"\n")+
                 cat("20 y 24 años: ", sum(series$rango_edad=="20 a 24 Años"),"\n")+
                 cat("25 y 29 años: ", sum(series$rango_edad=="25 a 29 Años"),"\n")+
                 cat("30 y 34 años: ", sum(series$rango_edad=="30 a 34 Años"),"\n")+
                 cat("35 y 39 años: ", sum(series$rango_edad=="35 a 39 Años"),"\n")+
                 cat("40 y más años: ", sum(series$rango_edad=="40 y más años"),"\n")+
                 cat("Sin Información: ", sum(series$rango_edad=="Sin Informacion"),"\n\n")+
                cat("Tipo Carrera\n") +
                cat("Técnico de Nivel Superior: ", sum(series$nivel_carrera_1=="Técnico de Nivel Superior"),"\n") +
                cat("Profesional Con Licenciatura: ", sum(series$nivel_carrera_1=="Profesional Con Licenciatura"),"\n") +
                cat("Profesional Sin Licenciatura: ", sum(series$nivel_carrera_1=="Profesional Sin Licenciatura"),"\n") +
                cat("Diplomado (superior a un semestre): ", sum(series$nivel_carrera_1=="Diplomado (superior a un semestre)"),"\n") +
                cat("Magister: ", sum(series$nivel_carrera_1=="Magister"),"\n") +
                cat("Doctorado: ", sum(series$nivel_carrera_1=="Doctorado"),"\n\n")+
                cat("Región Sede\n")+
                cat("Antofagasta: ",sum(series$region_sede=="Antofagasta"),"\n")+
                cat("Arica y Parinacota: ",sum(series$region_sede=="Arica y Parinacota"),"\n")+
                cat("Atacama: ",sum(series$region_sede=="Atacama"),"\n")+
                cat("Aysén: ",sum(series$region_sede=="Aysén"),"\n")+
                cat("Biobío: ",sum(series$region_sede=="Biobío"),"\n")+
                cat("Coquimbo: ",sum(series$region_sede=="Coquimbo"),"\n")+
                cat("Lib. Gral B. O'Higgins: ",sum(series$region_sede=="Lib. Gral B. O'Higgins"),"\n")+
                cat("Los Lagos: ",sum(series$region_sede=="Los Lagos"),"\n")+
                cat("Los Ríos: ",sum(series$region_sede=="Los Ríos"),"\n")+
                cat("Maule: ",sum(series$region_sede=="Maule"),"\n")+
                cat("Metropolitana: ",sum(series$region_sede=="Metropolitana"),"\n")+
                
                cat("Ñuble: ",sum(series$region_sede=="Ñuble"),"\n")+
                cat("Valparaíso: ",sum(series$region_sede=="Valparaíso"),"\n")
                
                
                
  
  return(informacion)
}
Funcion_Informacion()
```

### 3.2. Modelo lm

```{r}
Funcion_modelo_ml <- function(){
modelo_ml <- lm(series_2$dur_estudio_carr ~ series_2$tiempo_estudiando, series)
mod <- summary(modelo_ml)
return(mod)
}
Funcion_modelo_ml()
```

Residuos

En esta muestra cómo se distribuyen los errores o residuos entre los valores predichos y reales.

-    Idealmente, deberían estar centrados en 0.

-    Aquí hay una leve asimetría (valor máximo mucho mayor que el mínimo).

Coeficientes del modelo

Esto significa que el modelo ajustado es:

D = duracion teorica de la carrera

E = Tiempo que se tardo en terminar el estudiante

D = 1.5379 − 0.0952\*E .

Esta ecuacion no tiene sentido porque se esperaria que el que la inclinacion fuera ascendente, porque el tiempo que una estudiante tardara en estudia, en la mayoria de las veces seria mayor que el tiempo teorico de la carrera.

R² = 0.02183: el modelo explica solo un 2.18% de la variación en la duración de carrera. Este valor es muy bajo, así que aunque el efecto es estadísticamente significativo, no es muy fuerte en términos prácticos.

El valor estandar residual de error es 1.375: el promedio de error que comete el modelo al predecir.

F-statistic y su p-valor (\< 2.2e-16): el modelo en su conjunto es estadísticamente significativo.

Conclusión.

El modelo tiene significancia estadística, pero bajo poder explicativo.

Tiempo_estudiando tiene una relación negativa débil con dur_estudio_carr.

Posiblemente deberías incluir más variables explicativas para mejorar el modelo.

### 3.3. Lista

Se creara una funcion en una lista.

```{r}
#se creara una lista
Funcion_lista <- function(muestra,cantidad_anio,filtro_variable){
  
grafico_dinamico <- Funcion_Grafico(muestra,cantidad_anio,filtro_variable)
info <- Funcion_Informacion()
modelo <- Funcion_modelo_ml()

Res_lista <- list(
  Res_funcion_grafico=grafico_dinamico,
  Res_funcion_informacion=info,
  Res_modelo_ml=modelo
)

class(Res_lista) <- "mweth_output" 

return(Res_lista)

}
Funcion_lista(200000,10,"rango_edad")
```

## 4. Testeo de Funciones

### 4.1. Evaluación 1: pruebas usando la función test_that()

```{r}
#------- EVALUACIÓN 1: pruebas usando la función `test_that()`
# Definimos un unico escenario de prueba
#muestra=4000
#cantidad_anio = 15
#filtro_variable = "rango_edad"   
test_that("La salida es una lista de clase 'mweth_output' con 3 componentes", {
  resultado <- Funcion_lista(
                       muestra=4000,
                       cantidad_anio = 10,
                       filtro_variable = "rango_edad"                        )
  
  expect_s3_class(resultado, "mweth_output")
  expect_type(resultado, "list")
  expect_length(resultado, 3) 
  expect_named(resultado, c(
                           "Res_funcion_grafico",
                           "Res_funcion_informacion",
                           "Res_modelo_ml"))
})
```

Test fue pasado exitosamente.

### 4.2. Evaluación 2: Cobertura de Código

```{r}
# --- EVALUACIÓN 2: Cobertura de Código ---
library(testthat)
library(covr)
# Definimos un unico escenario de prueba
#muestra=5000
#cantidad_anio = 10
#filtro_variable = "region_sede"   

cat("\n--- Evaluacion de Cobertura de Codigo (Ejemplo Simplificado) ---\n")
cat("Mide qué partes de Funcion_lista son ejecutadas por un solo test.\n")

# Realiza la cobertura de F_gorro usando un unico test_that
cobertura <- function_coverage(
  fun = Funcion_lista, # La función a medir la cobertura
  { # El test que covr usará para evaluar la cobertura

    test_that('Funcion_lista funciona basic_test (para cobertura)', {
      expect_no_error(Funcion_lista(
                                  muestra=5000,
                                  cantidad_anio = 10,
                                  filtro_variable = "region_sede"                                  ))
    })
  }
)
print(cobertura)


```

Test pasado exitosamente.

### 4.3. Evaluación 3: Pruebas de Rendimiento (Benchmarking)

```{r}
# --- EVALUACIÓN 3: Pruebas de Rendimiento (Benchmarking) ---
library(microbenchmark)
library(wavethresh)


# --- Datos de Prueba para Benchmarking (Ejemplo Simple) ---
set.seed(123) 

# Definimos un unico escenario de prueba
#muestra=10000
#cantidad_anio = 8
#filtro_variable = "gen_alu"   
veces_a_ejecutar <- 50 # Número de repeticiones para la medición

cat("\n--- Evaluacion de Rendimiento (Benchmarking) ---\n")
cat("Mide el tiempo de ejecucion de Funcion_lista para un escenario simple.\n")

# Ejecutamos la prueba de rendimiento para el escenario definido
tryCatch({
  performance_test <- microbenchmark(
    F_lista_ejecucion = Funcion_lista(
                                  muestra=10000,
                                  cantidad_anio = 8,
                                  filtro_variable = "gen_alu"    
                                  ),
    times = veces_a_ejecutar, # Número de veces que se ejecuta la función
    unit = "ms" # Unidades para el tiempo: milisegundos
  )
  print(performance_test)
}, error = function(e) {
  message(sprintf("Error al realizar benchmark: %s", e$message))
})

print(performance_test)

```

### 4.4. Evaluación 4: Fuzz Testing Simple (Fuerza Bruta)

```{r}
# --- EVALUACIÓN 4: Fuzz Testing Simple (Fuerza Bruta) ---
cat("\n--- Fuzz Testing Simple ---\n")
cat("Intenta encontrar fallos en la funcion con entradas inesperadas.\n")
#Escenario
#muestra=1000
#cantidad_anio = 5
#filtro_variable = "nivel_carre_1"    
# Numero de veces que se ejecutara la prueba de fuzzing.
# Un valor pequeno es suficiente para un ejemplo.
num_fuzz_tests <- 5 

for (i in 1:num_fuzz_tests) {
  # Genera una señal aleatoria con longitud variable (entre 1 y 100)
  # y con posible presencia de NA.
  signal_fuzz <- sample(c(rnorm(sample(1:100, 1)), NA), sample(1:100, 1), replace = TRUE)
  
  # Selecciona un filtro y una familia de wavelet al azar entre opciones válidas.
  filtro_fuzz <- sample(c(1, 2), 1) 
  waveletn_fuzz <- sample(c("haar", "DaubExPhase"), 1) 
  
  # Genera niveles j0 y j1 de forma simple, asegurando que j0 <= j1 y sean positivos.
  # Simplificamos asumiendo que los niveles no excederán un maximo bajo (ej. 5)
  j0_fuzz <- sample(1:3, 1) 
  j1_fuzz <- sample(j0_fuzz:5, 1)
  
  # Intenta ejecutar F_gorro y captura cualquier error.
  resultado_fuzz <- tryCatch({
    # Suprime advertencias internas para enfocarse solo en errores fatales.
    suppressWarnings(Funcion_lista(
                                  muestra=1000,
                                  cantidad_anio = 5,
                                  filtro_variable = "nivel_carre_1"    
    ))
  }, error = function(e) {
    # Si hay un error, lo imprime.
    message(sprintf("Fuzz Test %d FALLO con error: %s", i, e$message))
    return(NULL) # Devuelve NULL si hubo un error para indicar fallo.
  })
  
  # Verifica si el resultado es nulo (indicando un error fatal) o si la clase no es la esperada.
  if (is.null(resultado_fuzz)) {
    # Ya se imprimio un mensaje de fallo en tryCatch
  } else if (!inherits(resultado_fuzz, "mweth_output")) {
    message(sprintf("Fuzz Test %d FALLO: Retorno un tipo de objeto inesperado", i))
  } else {
    message(sprintf("Fuzz Test %d PASO (resultado valido)", i))
  }
}
cat("Fuzz Testing Simple Completado. Revisar mensajes de 'FALLO' para problemas.\n")
```
